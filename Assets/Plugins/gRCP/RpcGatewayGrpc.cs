// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: v1/rpc_gateway.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace You.Facade.Proxies.v1 {
  public static partial class YouWatchService
  {
    static readonly string __ServiceName = "you.rpc.v1.YouWatchService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.AdRequest> __Marshaller_you_rpc_v1_AdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.AdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.AdResponses> __Marshaller_you_rpc_v1_AdResponses = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.AdResponses.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.FilterRequest> __Marshaller_you_rpc_v1_FilterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.FilterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.AdHistoryResponses> __Marshaller_you_rpc_v1_AdHistoryResponses = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.AdHistoryResponses.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.YwRematchingRequest> __Marshaller_you_rpc_v1_YwRematchingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.YwRematchingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.YwRematchingResponse> __Marshaller_you_rpc_v1_YwRematchingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.YwRematchingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.ObjectionableContentRequest> __Marshaller_you_rpc_v1_ObjectionableContentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.ObjectionableContentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.ObjectionableContentResponse> __Marshaller_you_rpc_v1_ObjectionableContentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.ObjectionableContentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.MetricRequest> __Marshaller_you_rpc_v1_MetricRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.MetricRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.MetricResponse> __Marshaller_you_rpc_v1_MetricResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.MetricResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.AdRequest, global::You.Facade.Proxies.v1.AdResponses> __Method_GetAvailableAds = new grpc::Method<global::You.Facade.Proxies.v1.AdRequest, global::You.Facade.Proxies.v1.AdResponses>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAvailableAds",
        __Marshaller_you_rpc_v1_AdRequest,
        __Marshaller_you_rpc_v1_AdResponses);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.FilterRequest, global::You.Facade.Proxies.v1.AdHistoryResponses> __Method_GetHistory = new grpc::Method<global::You.Facade.Proxies.v1.FilterRequest, global::You.Facade.Proxies.v1.AdHistoryResponses>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHistory",
        __Marshaller_you_rpc_v1_FilterRequest,
        __Marshaller_you_rpc_v1_AdHistoryResponses);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.YwRematchingRequest, global::You.Facade.Proxies.v1.YwRematchingResponse> __Method_YwRematching = new grpc::Method<global::You.Facade.Proxies.v1.YwRematchingRequest, global::You.Facade.Proxies.v1.YwRematchingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "YwRematching",
        __Marshaller_you_rpc_v1_YwRematchingRequest,
        __Marshaller_you_rpc_v1_YwRematchingResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.ObjectionableContentRequest, global::You.Facade.Proxies.v1.ObjectionableContentResponse> __Method_DetectedObjectionableContent = new grpc::Method<global::You.Facade.Proxies.v1.ObjectionableContentRequest, global::You.Facade.Proxies.v1.ObjectionableContentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DetectedObjectionableContent",
        __Marshaller_you_rpc_v1_ObjectionableContentRequest,
        __Marshaller_you_rpc_v1_ObjectionableContentResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse> __Method_TrackImpressionMetric = new grpc::Method<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TrackImpressionMetric",
        __Marshaller_you_rpc_v1_MetricRequest,
        __Marshaller_you_rpc_v1_MetricResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse> __Method_TrackWatchMetric = new grpc::Method<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TrackWatchMetric",
        __Marshaller_you_rpc_v1_MetricRequest,
        __Marshaller_you_rpc_v1_MetricResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse> __Method_TrackCtaMetric = new grpc::Method<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TrackCtaMetric",
        __Marshaller_you_rpc_v1_MetricRequest,
        __Marshaller_you_rpc_v1_MetricResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of YouWatchService</summary>
    [grpc::BindServiceMethod(typeof(YouWatchService), "BindService")]
    public abstract partial class YouWatchServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.AdResponses> GetAvailableAds(global::You.Facade.Proxies.v1.AdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.AdHistoryResponses> GetHistory(global::You.Facade.Proxies.v1.FilterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.YwRematchingResponse> YwRematching(global::You.Facade.Proxies.v1.YwRematchingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.ObjectionableContentResponse> DetectedObjectionableContent(global::You.Facade.Proxies.v1.ObjectionableContentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.MetricResponse> TrackImpressionMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.MetricResponse> TrackWatchMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.MetricResponse> TrackCtaMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YouWatchService</summary>
    public partial class YouWatchServiceClient : grpc::ClientBase<YouWatchServiceClient>
    {
      /// <summary>Creates a new client for YouWatchService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YouWatchServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YouWatchService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YouWatchServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YouWatchServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YouWatchServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::You.Facade.Proxies.v1.AdResponses GetAvailableAds(global::You.Facade.Proxies.v1.AdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableAds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.AdResponses GetAvailableAds(global::You.Facade.Proxies.v1.AdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAvailableAds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.AdResponses> GetAvailableAdsAsync(global::You.Facade.Proxies.v1.AdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableAdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.AdResponses> GetAvailableAdsAsync(global::You.Facade.Proxies.v1.AdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAvailableAds, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.AdHistoryResponses GetHistory(global::You.Facade.Proxies.v1.FilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.AdHistoryResponses GetHistory(global::You.Facade.Proxies.v1.FilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHistory, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.AdHistoryResponses> GetHistoryAsync(global::You.Facade.Proxies.v1.FilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.AdHistoryResponses> GetHistoryAsync(global::You.Facade.Proxies.v1.FilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHistory, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.YwRematchingResponse YwRematching(global::You.Facade.Proxies.v1.YwRematchingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return YwRematching(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.YwRematchingResponse YwRematching(global::You.Facade.Proxies.v1.YwRematchingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_YwRematching, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.YwRematchingResponse> YwRematchingAsync(global::You.Facade.Proxies.v1.YwRematchingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return YwRematchingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.YwRematchingResponse> YwRematchingAsync(global::You.Facade.Proxies.v1.YwRematchingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_YwRematching, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.ObjectionableContentResponse DetectedObjectionableContent(global::You.Facade.Proxies.v1.ObjectionableContentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetectedObjectionableContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.ObjectionableContentResponse DetectedObjectionableContent(global::You.Facade.Proxies.v1.ObjectionableContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DetectedObjectionableContent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.ObjectionableContentResponse> DetectedObjectionableContentAsync(global::You.Facade.Proxies.v1.ObjectionableContentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetectedObjectionableContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.ObjectionableContentResponse> DetectedObjectionableContentAsync(global::You.Facade.Proxies.v1.ObjectionableContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DetectedObjectionableContent, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.MetricResponse TrackImpressionMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TrackImpressionMetric(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.MetricResponse TrackImpressionMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TrackImpressionMetric, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.MetricResponse> TrackImpressionMetricAsync(global::You.Facade.Proxies.v1.MetricRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TrackImpressionMetricAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.MetricResponse> TrackImpressionMetricAsync(global::You.Facade.Proxies.v1.MetricRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TrackImpressionMetric, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.MetricResponse TrackWatchMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TrackWatchMetric(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.MetricResponse TrackWatchMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TrackWatchMetric, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.MetricResponse> TrackWatchMetricAsync(global::You.Facade.Proxies.v1.MetricRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TrackWatchMetricAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.MetricResponse> TrackWatchMetricAsync(global::You.Facade.Proxies.v1.MetricRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TrackWatchMetric, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.MetricResponse TrackCtaMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TrackCtaMetric(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.MetricResponse TrackCtaMetric(global::You.Facade.Proxies.v1.MetricRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TrackCtaMetric, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.MetricResponse> TrackCtaMetricAsync(global::You.Facade.Proxies.v1.MetricRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TrackCtaMetricAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.MetricResponse> TrackCtaMetricAsync(global::You.Facade.Proxies.v1.MetricRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TrackCtaMetric, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YouWatchServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YouWatchServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(YouWatchServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAvailableAds, serviceImpl.GetAvailableAds)
          .AddMethod(__Method_GetHistory, serviceImpl.GetHistory)
          .AddMethod(__Method_YwRematching, serviceImpl.YwRematching)
          .AddMethod(__Method_DetectedObjectionableContent, serviceImpl.DetectedObjectionableContent)
          .AddMethod(__Method_TrackImpressionMetric, serviceImpl.TrackImpressionMetric)
          .AddMethod(__Method_TrackWatchMetric, serviceImpl.TrackWatchMetric)
          .AddMethod(__Method_TrackCtaMetric, serviceImpl.TrackCtaMetric).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, YouWatchServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAvailableAds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.AdRequest, global::You.Facade.Proxies.v1.AdResponses>(serviceImpl.GetAvailableAds));
      serviceBinder.AddMethod(__Method_GetHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.FilterRequest, global::You.Facade.Proxies.v1.AdHistoryResponses>(serviceImpl.GetHistory));
      serviceBinder.AddMethod(__Method_YwRematching, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.YwRematchingRequest, global::You.Facade.Proxies.v1.YwRematchingResponse>(serviceImpl.YwRematching));
      serviceBinder.AddMethod(__Method_DetectedObjectionableContent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.ObjectionableContentRequest, global::You.Facade.Proxies.v1.ObjectionableContentResponse>(serviceImpl.DetectedObjectionableContent));
      serviceBinder.AddMethod(__Method_TrackImpressionMetric, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse>(serviceImpl.TrackImpressionMetric));
      serviceBinder.AddMethod(__Method_TrackWatchMetric, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse>(serviceImpl.TrackWatchMetric));
      serviceBinder.AddMethod(__Method_TrackCtaMetric, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.MetricRequest, global::You.Facade.Proxies.v1.MetricResponse>(serviceImpl.TrackCtaMetric));
    }

  }
  public static partial class YouSocialService
  {
    static readonly string __ServiceName = "you.rpc.v1.YouSocialService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.YsRematchingRequest> __Marshaller_you_rpc_v1_YsRematchingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.YsRematchingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.YsRematchingResponse> __Marshaller_you_rpc_v1_YsRematchingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.YsRematchingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.YsRematchingRequest, global::You.Facade.Proxies.v1.YsRematchingResponse> __Method_YsRematching = new grpc::Method<global::You.Facade.Proxies.v1.YsRematchingRequest, global::You.Facade.Proxies.v1.YsRematchingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "YsRematching",
        __Marshaller_you_rpc_v1_YsRematchingRequest,
        __Marshaller_you_rpc_v1_YsRematchingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of YouSocialService</summary>
    [grpc::BindServiceMethod(typeof(YouSocialService), "BindService")]
    public abstract partial class YouSocialServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.YsRematchingResponse> YsRematching(global::You.Facade.Proxies.v1.YsRematchingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YouSocialService</summary>
    public partial class YouSocialServiceClient : grpc::ClientBase<YouSocialServiceClient>
    {
      /// <summary>Creates a new client for YouSocialService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YouSocialServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YouSocialService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YouSocialServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YouSocialServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YouSocialServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::You.Facade.Proxies.v1.YsRematchingResponse YsRematching(global::You.Facade.Proxies.v1.YsRematchingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return YsRematching(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.YsRematchingResponse YsRematching(global::You.Facade.Proxies.v1.YsRematchingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_YsRematching, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.YsRematchingResponse> YsRematchingAsync(global::You.Facade.Proxies.v1.YsRematchingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return YsRematchingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.YsRematchingResponse> YsRematchingAsync(global::You.Facade.Proxies.v1.YsRematchingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_YsRematching, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YouSocialServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YouSocialServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(YouSocialServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_YsRematching, serviceImpl.YsRematching).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, YouSocialServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_YsRematching, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.YsRematchingRequest, global::You.Facade.Proxies.v1.YsRematchingResponse>(serviceImpl.YsRematching));
    }

  }
  public static partial class ProfileService
  {
    static readonly string __ServiceName = "you.rpc.v1.ProfileService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.BlockProfileRequest> __Marshaller_you_rpc_v1_BlockProfileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.BlockProfileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.BlockProfileResponse> __Marshaller_you_rpc_v1_BlockProfileResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.BlockProfileResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.CatalogsRequest> __Marshaller_you_rpc_v1_CatalogsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.CatalogsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.CatalogsResponse> __Marshaller_you_rpc_v1_CatalogsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.CatalogsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.ProfileCostRequest> __Marshaller_you_rpc_v1_ProfileCostRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.ProfileCostRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.ProfileCostResponse> __Marshaller_you_rpc_v1_ProfileCostResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.ProfileCostResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.QueryReplaceProfileRequest> __Marshaller_you_rpc_v1_QueryReplaceProfileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.QueryReplaceProfileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.GetProfileRequest> __Marshaller_you_rpc_v1_GetProfileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.GetProfileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.GetProfileResponse> __Marshaller_you_rpc_v1_GetProfileResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.GetProfileResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.BlockProfileRequest, global::You.Facade.Proxies.v1.BlockProfileResponse> __Method_BlockProfile = new grpc::Method<global::You.Facade.Proxies.v1.BlockProfileRequest, global::You.Facade.Proxies.v1.BlockProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BlockProfile",
        __Marshaller_you_rpc_v1_BlockProfileRequest,
        __Marshaller_you_rpc_v1_BlockProfileResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.CatalogsRequest, global::You.Facade.Proxies.v1.CatalogsResponse> __Method_GetCatalogs = new grpc::Method<global::You.Facade.Proxies.v1.CatalogsRequest, global::You.Facade.Proxies.v1.CatalogsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCatalogs",
        __Marshaller_you_rpc_v1_CatalogsRequest,
        __Marshaller_you_rpc_v1_CatalogsResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.ProfileCostRequest, global::You.Facade.Proxies.v1.ProfileCostResponse> __Method_GetProfileCostInYouc = new grpc::Method<global::You.Facade.Proxies.v1.ProfileCostRequest, global::You.Facade.Proxies.v1.ProfileCostResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProfileCostInYouc",
        __Marshaller_you_rpc_v1_ProfileCostRequest,
        __Marshaller_you_rpc_v1_ProfileCostResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.QueryReplaceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_QueryReplaceProfile = new grpc::Method<global::You.Facade.Proxies.v1.QueryReplaceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryReplaceProfile",
        __Marshaller_you_rpc_v1_QueryReplaceProfileRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.GetProfileRequest, global::You.Facade.Proxies.v1.GetProfileResponse> __Method_GetProfile = new grpc::Method<global::You.Facade.Proxies.v1.GetProfileRequest, global::You.Facade.Proxies.v1.GetProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProfile",
        __Marshaller_you_rpc_v1_GetProfileRequest,
        __Marshaller_you_rpc_v1_GetProfileResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of ProfileService</summary>
    [grpc::BindServiceMethod(typeof(ProfileService), "BindService")]
    public abstract partial class ProfileServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.BlockProfileResponse> BlockProfile(global::You.Facade.Proxies.v1.BlockProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.CatalogsResponse> GetCatalogs(global::You.Facade.Proxies.v1.CatalogsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.ProfileCostResponse> GetProfileCostInYouc(global::You.Facade.Proxies.v1.ProfileCostRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> QueryReplaceProfile(global::You.Facade.Proxies.v1.QueryReplaceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.GetProfileResponse> GetProfile(global::You.Facade.Proxies.v1.GetProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProfileService</summary>
    public partial class ProfileServiceClient : grpc::ClientBase<ProfileServiceClient>
    {
      /// <summary>Creates a new client for ProfileService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProfileServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProfileService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProfileServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProfileServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProfileServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::You.Facade.Proxies.v1.BlockProfileResponse BlockProfile(global::You.Facade.Proxies.v1.BlockProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BlockProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.BlockProfileResponse BlockProfile(global::You.Facade.Proxies.v1.BlockProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BlockProfile, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.BlockProfileResponse> BlockProfileAsync(global::You.Facade.Proxies.v1.BlockProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BlockProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.BlockProfileResponse> BlockProfileAsync(global::You.Facade.Proxies.v1.BlockProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BlockProfile, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.CatalogsResponse GetCatalogs(global::You.Facade.Proxies.v1.CatalogsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCatalogs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.CatalogsResponse GetCatalogs(global::You.Facade.Proxies.v1.CatalogsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCatalogs, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.CatalogsResponse> GetCatalogsAsync(global::You.Facade.Proxies.v1.CatalogsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCatalogsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.CatalogsResponse> GetCatalogsAsync(global::You.Facade.Proxies.v1.CatalogsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCatalogs, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.ProfileCostResponse GetProfileCostInYouc(global::You.Facade.Proxies.v1.ProfileCostRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfileCostInYouc(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.ProfileCostResponse GetProfileCostInYouc(global::You.Facade.Proxies.v1.ProfileCostRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProfileCostInYouc, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.ProfileCostResponse> GetProfileCostInYoucAsync(global::You.Facade.Proxies.v1.ProfileCostRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfileCostInYoucAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.ProfileCostResponse> GetProfileCostInYoucAsync(global::You.Facade.Proxies.v1.ProfileCostRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProfileCostInYouc, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty QueryReplaceProfile(global::You.Facade.Proxies.v1.QueryReplaceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryReplaceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty QueryReplaceProfile(global::You.Facade.Proxies.v1.QueryReplaceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryReplaceProfile, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> QueryReplaceProfileAsync(global::You.Facade.Proxies.v1.QueryReplaceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryReplaceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> QueryReplaceProfileAsync(global::You.Facade.Proxies.v1.QueryReplaceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryReplaceProfile, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.GetProfileResponse GetProfile(global::You.Facade.Proxies.v1.GetProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.GetProfileResponse GetProfile(global::You.Facade.Proxies.v1.GetProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProfile, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.GetProfileResponse> GetProfileAsync(global::You.Facade.Proxies.v1.GetProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.GetProfileResponse> GetProfileAsync(global::You.Facade.Proxies.v1.GetProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProfile, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProfileServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProfileServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProfileServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_BlockProfile, serviceImpl.BlockProfile)
          .AddMethod(__Method_GetCatalogs, serviceImpl.GetCatalogs)
          .AddMethod(__Method_GetProfileCostInYouc, serviceImpl.GetProfileCostInYouc)
          .AddMethod(__Method_QueryReplaceProfile, serviceImpl.QueryReplaceProfile)
          .AddMethod(__Method_GetProfile, serviceImpl.GetProfile).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProfileServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_BlockProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.BlockProfileRequest, global::You.Facade.Proxies.v1.BlockProfileResponse>(serviceImpl.BlockProfile));
      serviceBinder.AddMethod(__Method_GetCatalogs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.CatalogsRequest, global::You.Facade.Proxies.v1.CatalogsResponse>(serviceImpl.GetCatalogs));
      serviceBinder.AddMethod(__Method_GetProfileCostInYouc, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.ProfileCostRequest, global::You.Facade.Proxies.v1.ProfileCostResponse>(serviceImpl.GetProfileCostInYouc));
      serviceBinder.AddMethod(__Method_QueryReplaceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.QueryReplaceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.QueryReplaceProfile));
      serviceBinder.AddMethod(__Method_GetProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.GetProfileRequest, global::You.Facade.Proxies.v1.GetProfileResponse>(serviceImpl.GetProfile));
    }

  }
  public static partial class YouWalletService
  {
    static readonly string __ServiceName = "you.rpc.v1.YouWalletService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.BalanceRequest> __Marshaller_you_rpc_v1_BalanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.BalanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.FilterRequest> __Marshaller_you_rpc_v1_FilterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.FilterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.PeerTxResponses> __Marshaller_you_rpc_v1_PeerTxResponses = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.PeerTxResponses.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.BalanceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_QueryBalance = new grpc::Method<global::You.Facade.Proxies.v1.BalanceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryBalance",
        __Marshaller_you_rpc_v1_BalanceRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.FilterRequest, global::You.Facade.Proxies.v1.PeerTxResponses> __Method_GetTransactions = new grpc::Method<global::You.Facade.Proxies.v1.FilterRequest, global::You.Facade.Proxies.v1.PeerTxResponses>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactions",
        __Marshaller_you_rpc_v1_FilterRequest,
        __Marshaller_you_rpc_v1_PeerTxResponses);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of YouWalletService</summary>
    [grpc::BindServiceMethod(typeof(YouWalletService), "BindService")]
    public abstract partial class YouWalletServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> QueryBalance(global::You.Facade.Proxies.v1.BalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.PeerTxResponses> GetTransactions(global::You.Facade.Proxies.v1.FilterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YouWalletService</summary>
    public partial class YouWalletServiceClient : grpc::ClientBase<YouWalletServiceClient>
    {
      /// <summary>Creates a new client for YouWalletService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YouWalletServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YouWalletService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YouWalletServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YouWalletServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YouWalletServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Google.Protobuf.WellKnownTypes.Empty QueryBalance(global::You.Facade.Proxies.v1.BalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty QueryBalance(global::You.Facade.Proxies.v1.BalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> QueryBalanceAsync(global::You.Facade.Proxies.v1.BalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> QueryBalanceAsync(global::You.Facade.Proxies.v1.BalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryBalance, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.PeerTxResponses GetTransactions(global::You.Facade.Proxies.v1.FilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.PeerTxResponses GetTransactions(global::You.Facade.Proxies.v1.FilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.PeerTxResponses> GetTransactionsAsync(global::You.Facade.Proxies.v1.FilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.PeerTxResponses> GetTransactionsAsync(global::You.Facade.Proxies.v1.FilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YouWalletServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YouWalletServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(YouWalletServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_QueryBalance, serviceImpl.QueryBalance)
          .AddMethod(__Method_GetTransactions, serviceImpl.GetTransactions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, YouWalletServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_QueryBalance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.BalanceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.QueryBalance));
      serviceBinder.AddMethod(__Method_GetTransactions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.FilterRequest, global::You.Facade.Proxies.v1.PeerTxResponses>(serviceImpl.GetTransactions));
    }

  }
  public static partial class YouGoDemoService
  {
    static readonly string __ServiceName = "you.rpc.v1.YouGoDemoService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.YgBasketRequest> __Marshaller_you_rpc_v1_YgBasketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.YgBasketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.YgBasketResponse> __Marshaller_you_rpc_v1_YgBasketResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.YgBasketResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.SubscribeResponse> __Marshaller_you_rpc_v1_SubscribeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.SubscribeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.PrizeByBasketRequest> __Marshaller_you_rpc_v1_PrizeByBasketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.PrizeByBasketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.PrizesByBasketResponse> __Marshaller_you_rpc_v1_PrizesByBasketResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.PrizesByBasketResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.PrizeRequest> __Marshaller_you_rpc_v1_PrizeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.PrizeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.LockPrizeReply> __Marshaller_you_rpc_v1_LockPrizeReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.LockPrizeReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.HistoriesResponse> __Marshaller_you_rpc_v1_HistoriesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.HistoriesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.YgBasketRequest, global::You.Facade.Proxies.v1.YgBasketResponse> __Method_GetBaskets = new grpc::Method<global::You.Facade.Proxies.v1.YgBasketRequest, global::You.Facade.Proxies.v1.YgBasketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBaskets",
        __Marshaller_you_rpc_v1_YgBasketRequest,
        __Marshaller_you_rpc_v1_YgBasketResponse);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::You.Facade.Proxies.v1.SubscribeResponse> __Method_SubscribeTest = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::You.Facade.Proxies.v1.SubscribeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeTest",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_you_rpc_v1_SubscribeResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.PrizeByBasketRequest, global::You.Facade.Proxies.v1.PrizesByBasketResponse> __Method_GetPrizesByBasket = new grpc::Method<global::You.Facade.Proxies.v1.PrizeByBasketRequest, global::You.Facade.Proxies.v1.PrizesByBasketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPrizesByBasket",
        __Marshaller_you_rpc_v1_PrizeByBasketRequest,
        __Marshaller_you_rpc_v1_PrizesByBasketResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.PrizeRequest, global::You.Facade.Proxies.v1.LockPrizeReply> __Method_LockPrize = new grpc::Method<global::You.Facade.Proxies.v1.PrizeRequest, global::You.Facade.Proxies.v1.LockPrizeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LockPrize",
        __Marshaller_you_rpc_v1_PrizeRequest,
        __Marshaller_you_rpc_v1_LockPrizeReply);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::You.Facade.Proxies.v1.HistoriesResponse> __Method_GetHistory = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::You.Facade.Proxies.v1.HistoriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHistory",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_you_rpc_v1_HistoriesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of YouGoDemoService</summary>
    [grpc::BindServiceMethod(typeof(YouGoDemoService), "BindService")]
    public abstract partial class YouGoDemoServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.YgBasketResponse> GetBaskets(global::You.Facade.Proxies.v1.YgBasketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeTest(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::You.Facade.Proxies.v1.SubscribeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.PrizesByBasketResponse> GetPrizesByBasket(global::You.Facade.Proxies.v1.PrizeByBasketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.LockPrizeReply> LockPrize(global::You.Facade.Proxies.v1.PrizeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.HistoriesResponse> GetHistory(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YouGoDemoService</summary>
    public partial class YouGoDemoServiceClient : grpc::ClientBase<YouGoDemoServiceClient>
    {
      /// <summary>Creates a new client for YouGoDemoService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YouGoDemoServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YouGoDemoService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YouGoDemoServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YouGoDemoServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YouGoDemoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::You.Facade.Proxies.v1.YgBasketResponse GetBaskets(global::You.Facade.Proxies.v1.YgBasketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBaskets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.YgBasketResponse GetBaskets(global::You.Facade.Proxies.v1.YgBasketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBaskets, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.YgBasketResponse> GetBasketsAsync(global::You.Facade.Proxies.v1.YgBasketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBasketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.YgBasketResponse> GetBasketsAsync(global::You.Facade.Proxies.v1.YgBasketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBaskets, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::You.Facade.Proxies.v1.SubscribeResponse> SubscribeTest(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::You.Facade.Proxies.v1.SubscribeResponse> SubscribeTest(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeTest, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.PrizesByBasketResponse GetPrizesByBasket(global::You.Facade.Proxies.v1.PrizeByBasketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrizesByBasket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.PrizesByBasketResponse GetPrizesByBasket(global::You.Facade.Proxies.v1.PrizeByBasketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPrizesByBasket, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.PrizesByBasketResponse> GetPrizesByBasketAsync(global::You.Facade.Proxies.v1.PrizeByBasketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrizesByBasketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.PrizesByBasketResponse> GetPrizesByBasketAsync(global::You.Facade.Proxies.v1.PrizeByBasketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPrizesByBasket, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.LockPrizeReply LockPrize(global::You.Facade.Proxies.v1.PrizeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LockPrize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.LockPrizeReply LockPrize(global::You.Facade.Proxies.v1.PrizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LockPrize, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.LockPrizeReply> LockPrizeAsync(global::You.Facade.Proxies.v1.PrizeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LockPrizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.LockPrizeReply> LockPrizeAsync(global::You.Facade.Proxies.v1.PrizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LockPrize, null, options, request);
      }
      public virtual global::You.Facade.Proxies.v1.HistoriesResponse GetHistory(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.HistoriesResponse GetHistory(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHistory, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.HistoriesResponse> GetHistoryAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.HistoriesResponse> GetHistoryAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHistory, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YouGoDemoServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YouGoDemoServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(YouGoDemoServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetBaskets, serviceImpl.GetBaskets)
          .AddMethod(__Method_SubscribeTest, serviceImpl.SubscribeTest)
          .AddMethod(__Method_GetPrizesByBasket, serviceImpl.GetPrizesByBasket)
          .AddMethod(__Method_LockPrize, serviceImpl.LockPrize)
          .AddMethod(__Method_GetHistory, serviceImpl.GetHistory).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, YouGoDemoServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetBaskets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.YgBasketRequest, global::You.Facade.Proxies.v1.YgBasketResponse>(serviceImpl.GetBaskets));
      serviceBinder.AddMethod(__Method_SubscribeTest, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::You.Facade.Proxies.v1.SubscribeResponse>(serviceImpl.SubscribeTest));
      serviceBinder.AddMethod(__Method_GetPrizesByBasket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.PrizeByBasketRequest, global::You.Facade.Proxies.v1.PrizesByBasketResponse>(serviceImpl.GetPrizesByBasket));
      serviceBinder.AddMethod(__Method_LockPrize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.PrizeRequest, global::You.Facade.Proxies.v1.LockPrizeReply>(serviceImpl.LockPrize));
      serviceBinder.AddMethod(__Method_GetHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::You.Facade.Proxies.v1.HistoriesResponse>(serviceImpl.GetHistory));
    }

  }
  public static partial class GeoService
  {
    static readonly string __ServiceName = "you.rpc.v1.GeoService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.LocationRequest> __Marshaller_you_rpc_v1_LocationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.LocationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.LocationResponse> __Marshaller_you_rpc_v1_LocationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.LocationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.LocationRequest, global::You.Facade.Proxies.v1.LocationResponse> __Method_SetPeerLocation = new grpc::Method<global::You.Facade.Proxies.v1.LocationRequest, global::You.Facade.Proxies.v1.LocationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPeerLocation",
        __Marshaller_you_rpc_v1_LocationRequest,
        __Marshaller_you_rpc_v1_LocationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[5]; }
    }

    /// <summary>Base class for server-side implementations of GeoService</summary>
    [grpc::BindServiceMethod(typeof(GeoService), "BindService")]
    public abstract partial class GeoServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.LocationResponse> SetPeerLocation(global::You.Facade.Proxies.v1.LocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GeoService</summary>
    public partial class GeoServiceClient : grpc::ClientBase<GeoServiceClient>
    {
      /// <summary>Creates a new client for GeoService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GeoServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GeoService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GeoServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GeoServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GeoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::You.Facade.Proxies.v1.LocationResponse SetPeerLocation(global::You.Facade.Proxies.v1.LocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPeerLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.LocationResponse SetPeerLocation(global::You.Facade.Proxies.v1.LocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPeerLocation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.LocationResponse> SetPeerLocationAsync(global::You.Facade.Proxies.v1.LocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPeerLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.LocationResponse> SetPeerLocationAsync(global::You.Facade.Proxies.v1.LocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPeerLocation, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GeoServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GeoServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GeoServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetPeerLocation, serviceImpl.SetPeerLocation).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GeoServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SetPeerLocation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.LocationRequest, global::You.Facade.Proxies.v1.LocationResponse>(serviceImpl.SetPeerLocation));
    }

  }
  public static partial class UserService
  {
    static readonly string __ServiceName = "you.rpc.v1.UserService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.IsExistsRequest> __Marshaller_you_rpc_v1_IsExistsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.IsExistsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.IsExistsResponse> __Marshaller_you_rpc_v1_IsExistsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.IsExistsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.IsExistsRequest, global::You.Facade.Proxies.v1.IsExistsResponse> __Method_IsExists = new grpc::Method<global::You.Facade.Proxies.v1.IsExistsRequest, global::You.Facade.Proxies.v1.IsExistsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsExists",
        __Marshaller_you_rpc_v1_IsExistsRequest,
        __Marshaller_you_rpc_v1_IsExistsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[6]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    [grpc::BindServiceMethod(typeof(UserService), "BindService")]
    public abstract partial class UserServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.IsExistsResponse> IsExists(global::You.Facade.Proxies.v1.IsExistsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public partial class UserServiceClient : grpc::ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::You.Facade.Proxies.v1.IsExistsResponse IsExists(global::You.Facade.Proxies.v1.IsExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExists(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.IsExistsResponse IsExists(global::You.Facade.Proxies.v1.IsExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsExists, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.IsExistsResponse> IsExistsAsync(global::You.Facade.Proxies.v1.IsExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsExistsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.IsExistsResponse> IsExistsAsync(global::You.Facade.Proxies.v1.IsExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsExists, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_IsExists, serviceImpl.IsExists).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_IsExists, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.IsExistsRequest, global::You.Facade.Proxies.v1.IsExistsResponse>(serviceImpl.IsExists));
    }

  }
  public static partial class TransferService
  {
    static readonly string __ServiceName = "you.rpc.v1.TransferService";

    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.TopicRequest> __Marshaller_you_rpc_v1_TopicRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.TopicRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.TopicResponse> __Marshaller_you_rpc_v1_TopicResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.TopicResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.NotificationRequest> __Marshaller_you_rpc_v1_NotificationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.NotificationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::You.Facade.Proxies.v1.NotificationResponse> __Marshaller_you_rpc_v1_NotificationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::You.Facade.Proxies.v1.NotificationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.TopicRequest, global::You.Facade.Proxies.v1.TopicResponse> __Method_Send = new grpc::Method<global::You.Facade.Proxies.v1.TopicRequest, global::You.Facade.Proxies.v1.TopicResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Send",
        __Marshaller_you_rpc_v1_TopicRequest,
        __Marshaller_you_rpc_v1_TopicResponse);

    static readonly grpc::Method<global::You.Facade.Proxies.v1.NotificationRequest, global::You.Facade.Proxies.v1.NotificationResponse> __Method_Subscribe = new grpc::Method<global::You.Facade.Proxies.v1.NotificationRequest, global::You.Facade.Proxies.v1.NotificationResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_you_rpc_v1_NotificationRequest,
        __Marshaller_you_rpc_v1_NotificationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::You.Facade.Proxies.v1.RpcGatewayReflection.Descriptor.Services[7]; }
    }

    /// <summary>Base class for server-side implementations of TransferService</summary>
    [grpc::BindServiceMethod(typeof(TransferService), "BindService")]
    public abstract partial class TransferServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::You.Facade.Proxies.v1.TopicResponse> Send(global::You.Facade.Proxies.v1.TopicRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Subscribe(global::You.Facade.Proxies.v1.NotificationRequest request, grpc::IServerStreamWriter<global::You.Facade.Proxies.v1.NotificationResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TransferService</summary>
    public partial class TransferServiceClient : grpc::ClientBase<TransferServiceClient>
    {
      /// <summary>Creates a new client for TransferService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TransferServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TransferService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TransferServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TransferServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TransferServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::You.Facade.Proxies.v1.TopicResponse Send(global::You.Facade.Proxies.v1.TopicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Send(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::You.Facade.Proxies.v1.TopicResponse Send(global::You.Facade.Proxies.v1.TopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Send, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.TopicResponse> SendAsync(global::You.Facade.Proxies.v1.TopicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::You.Facade.Proxies.v1.TopicResponse> SendAsync(global::You.Facade.Proxies.v1.TopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Send, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::You.Facade.Proxies.v1.NotificationResponse> Subscribe(global::You.Facade.Proxies.v1.NotificationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::You.Facade.Proxies.v1.NotificationResponse> Subscribe(global::You.Facade.Proxies.v1.NotificationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TransferServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TransferServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TransferServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Send, serviceImpl.Send)
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TransferServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Send, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::You.Facade.Proxies.v1.TopicRequest, global::You.Facade.Proxies.v1.TopicResponse>(serviceImpl.Send));
      serviceBinder.AddMethod(__Method_Subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::You.Facade.Proxies.v1.NotificationRequest, global::You.Facade.Proxies.v1.NotificationResponse>(serviceImpl.Subscribe));
    }

  }
}
#endregion
